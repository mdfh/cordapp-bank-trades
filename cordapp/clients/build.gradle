repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://software.r3.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

// See https://docs.spring.io/dependency-management-plugin/docs/current/reference/html
dependencyManagement {
    dependencies {
        dependency "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    compile project(":contracts")
    compile project(":workflows")
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Corda dependencies.
    compile "net.corda:corda-core:$corda_release_version"
    compile "net.corda:corda-jackson:$corda_release_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    compile "net.corda:corda:$corda_release_version"
}

/* The Client is the communication channel between the external and the node. This task will help you immediately
 * execute your rpc methods in the main method of the client.kt. You can somewhat see this as a quick test of making
 * RPC calls to your nodes.
 */
//task runTemplateClient(type: JavaExec, dependsOn: assemble) {
//    classpath = sourceSets.main.runtimeClasspath
//    main = 'com.template.ClientKt'
//    args 'localhost:10006', 'user1', 'test'
//}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
task runAsPartyA(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.banks.trade.webserver.ServerKt'
    args '--server.port=8086', '--config.rpc.host=localhost', '--config.rpc.port=10005', '--config.rpc.username=user1', '--config.rpc.password=test'
}

task runAsPartyB(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.banks.trade.webserver.ServerKt'
    args '--server.port=8087', '--config.rpc.host=localhost', '--config.rpc.port=10007', '--config.rpc.username=user1', '--config.rpc.password=test'
}

task runAsPartyC(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.banks.trade.webserver.ServerKt'
    args '--server.port=8088', '--config.rpc.host=localhost', '--config.rpc.port=10009', '--config.rpc.username=user1', '--config.rpc.password=test'
}